# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "generic/ubuntu2004"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  config.vm.network "forwarded_port", guest: 9090, host: 9090
  config.vm.network "forwarded_port", guest: 9100, host: 9100

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
   config.vm.provision "shell", inline: <<-SHELL
     apt-get update
     apt-get upgrade -y 
   SHELL



   # Installation of Prometheus
   #
   # curl -LO "https://github.com/prometheus/prometheus/releases/download/v2.28.1/prometheus-2.28.1.linux-amd64.tar.gz"
   # tar xf prometheus-2.28.1.linux-amd64.tar.gz
   # 
   # mkdir /prom_data
   # mkdir /etc/prometheus
   # chown prometheus:prometheus /prom_data
   # mv prometheus-2.29.0-rc.0.linux-amd64/console* /etc/prometheus/
   # mv prometheus-2.29.0-rc.0.linux-amd64/prometheus.yml /etc/prometheus/
   # chown -R  prometheus:prometheus /etc/prometheus/
   # mv prometheus-2.29.0-rc.0.linux-amd64/prom* /usr/local/bin/
   # chown -R  prometheus:prometheus /usr/local/bin/prom*
   # cat <<EOF > /lib/systemd/system/prometheus.service
#[Unit]
#Description=Prometheus
#Wants=network-online.target
#After=network-online.target
#
#[Service]
#User=prometheus
#Group=prometheus
#Type=simple
#
#ExecStart=/usr/local/bin/prometheus   --config.file /etc/prometheus/prometheus.yml   --storage.tsdb.path /prom_data   --web.console.templates=/etc/prometheus/consoles   --web.console.libraries=/etc/prometheus/console_libraries   --web.enable-lifecycle
#
#[Install]
#WantedBy=multi-user.target
#
#EOF
   # systemctl daemon-reload
   # systemctl start prometheus
   # systemctl enable prometheus
   #
   #
   #
   # useradd --system --shell /bin/false nodeexporter
   # mv node_exporter-1.2.0.linux-amd64/node_exporter /usr/local/bin/
   # chown nodeexporter:nodeexporter /usr/local/bin/node_exporter
   # cat <<EOF > /lib/systemd/system/nodeexporter.service
#[Unit]
#Description=NodeExporter
#Wants=network-online.target
#After=network-online.target
#
#[Service]
#User=nodeexporter
#Group=nodeexporter
#Type=simple
#
#ExecStart=/usr/local/bin/node_exporter
#
#[Install]
#WantedBy=multi-user.target
#
#EOF
   # systemctl daemon-reload
   # systemctl start nodeexporter
   # systemctl enable nodeexporter


end
